{"version":3,"sources":["APILink.js","Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["APILink","props","name","apiLinkData","apiLink","properties","url","className","onClick","updateDefinitionLink","Sidebar","organizationConfig","apiLinks","definitionList","getOrganizationData","orgName","i","length","value","push","src","displayImage","alt","displayTag","App","Component","constructor","super","this","state","definitionLink","swaggerhub","bind","componentWillMount","setState","Config","orgData","inputMethod","inputResource","inputParams","fetch","method","then","response","ok","json","Error","organization","apis","newLink","render","id","docExpansion","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ifAkBeA,MAfCC,IACZ,IAAIC,EAAOD,EAAME,YAAYD,KACzBE,EAAUH,EAAME,YAAYE,WAAW,GAAGC,IAMhD,OACE,qBAAKC,UAAU,WAAWC,QAAS,KAJjCP,EAAMQ,qBAAqBL,IAI7B,SACGF,KCyBQQ,MAnCCT,IACZ,IAAIU,EAAqBV,EAAMU,mBAC3BC,EAAW,GAEf,GAA6B,OAAzBX,EAAMY,eACNZ,EAAMa,oBAAoBH,EAAmBI,cAE7C,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAMY,eAAeI,OAAQD,IACO,SAAhDf,EAAMY,eAAeG,GAAGX,WAAW,GAAGa,OACtCN,EAASO,KACL,cAAC,EAAD,CAEIhB,YAAaF,EAAMY,eAAeG,GAClCP,qBAAsBR,EAAMQ,sBAFvBO,IAS3B,OACE,sBAAKT,UAAU,WAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,qBAAKa,IAAKT,EAAmBU,aAAcC,IAAI,SAE/C,6BAAKX,EAAmBY,gBAE5B,qBAAKhB,UAAU,gBAAf,SAEKK,Q,OC1Bb,MAAMY,UAAYC,YAChBC,YAAYzB,GACV0B,MAAM1B,GACN2B,KAAKC,MAAQ,CACXlB,mBAAoB,KACpBE,eAAgB,KAChBiB,eAAgB,kEAElBF,KAAKG,WAAaH,KAAKG,WAAWC,KAAKJ,MACvCA,KAAKd,oBAAsBc,KAAKd,oBAAoBkB,KAAKJ,MACzDA,KAAKnB,qBAAuBmB,KAAKnB,qBAAqBuB,KAAKJ,MAG7DK,qBACEL,KAAKM,SAAS,CACZvB,mBAAqBwB,EAAOC,UAIhCL,WAAWM,EAAaC,EAAeC,GACrC,IAAIjC,EAAM,GAOV,OALEA,EADEiC,EACI,mCAAqCD,EAAgB,IAAMC,EAE3D,mCAAqCD,EAGtCE,MAAMlC,EAAK,CACdmC,OAAQJ,IACTK,MAAKC,IACN,GAAIA,EAASC,GACX,OAAOD,EAASE,OAChB,MAAM,IAAIC,MAAM,4CACjBJ,MAAKG,GACCA,IAIX/B,oBAAoBiC,GAClB,IACIT,EAAgBS,EAEpBnB,KAAKG,WAAW,MAAOO,EAHL,wCAGiCI,MAAKC,IACtDf,KAAKM,SAAS,CACZrB,eAAgB8B,EAASK,UAK/BvC,qBAAqBwC,GACnBrB,KAAKM,SAAS,CACZJ,eAAgBmB,IAIpBC,SACE,OACE,sBAAK3C,UAAU,MAAf,UACE,cAAC,EAAD,CACEI,mBAAoBiB,KAAKC,MAAMlB,mBAC/BE,eAAgBe,KAAKC,MAAMhB,eAC3BJ,qBAAsBmB,KAAKnB,qBAC3BK,oBAAqBc,KAAKd,sBAG5B,qBAAKqC,GAAG,WAAR,SACE,cAAC,IAAD,CACE7C,IAAKsB,KAAKC,MAAMC,eAChBsB,aAAa,eAQV5B,QCtEK6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,cAAC,EAAD,IAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAKsB,IACjCA,EAAaC,kB","file":"static/js/main.54eea87b.chunk.js","sourcesContent":["\nimport React from 'react';\n\nconst APILink = props => {\n    let name = props.apiLinkData.name\n    let apiLink = props.apiLinkData.properties[0].url\n\n    function handleClick() {\n      props.updateDefinitionLink(apiLink)\n    }\n\n  return (  \n    <div className=\"api-link\" onClick={() => handleClick()}>\n      {name}\n    </div>\n  )\n}\n\nexport default APILink;","import React from 'react';\nimport APILink from './APILink.js'\n\nconst Sidebar = props => {\n    let organizationConfig = props.organizationConfig\n    let apiLinks = []\n\n    if (props.definitionList === null) {\n        props.getOrganizationData(organizationConfig.orgName)\n    } else {\n        for (let i = 0; i < props.definitionList.length; i++) {\n            if (props.definitionList[i].properties[4].value === \"true\") {\n                apiLinks.push(\n                    <APILink \n                        key={i}\n                        apiLinkData={props.definitionList[i]}\n                        updateDefinitionLink={props.updateDefinitionLink}\n                    />\n                )\n            }\n        }\n    }\n\n  return (\n    <div className=\"side-bar\">\n        <div className=\"side-bar-header\">\n            <img src={organizationConfig.displayImage} alt=\"logo\"/>\n            {/* <h1>{organizationConfig.displayName}</h1> */}\n            <h3>{organizationConfig.displayTag}</h3>\n        </div>\n        <div className=\"side-bar-body\">\n            {/* <h3>API DOCS</h3> */}\n            {apiLinks}\n        </div>\n    </div>\n  )\n}\n\nexport default Sidebar;","import React, { Component } from 'react';\nimport SwaggerUI from 'swagger-ui-react';\nimport Config from './organization_config.json';\nimport Sidebar from './Sidebar.js'\nimport \"swagger-ui-react/swagger-ui.css\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      organizationConfig: null,\n      definitionList: null,\n      definitionLink: \"https://api.swaggerhub.com/apis/PostBeyond/analytics-api/1.0.0\"\n    }\n    this.swaggerhub = this.swaggerhub.bind(this)\n    this.getOrganizationData = this.getOrganizationData.bind(this)\n    this.updateDefinitionLink = this.updateDefinitionLink.bind(this)\n  }\n\n  componentWillMount() {\n    this.setState({\n      organizationConfig:  Config.orgData,\n    })\n  }\n\n  swaggerhub(inputMethod, inputResource, inputParams) {\n    let url = \"\"\n    if (inputParams) {\n      url = \"https://api.swaggerhub.com/apis/\" + inputResource + \"?\" + inputParams\n    } else {\n      url = \"https://api.swaggerhub.com/apis/\" + inputResource\n    }\n    \n    return fetch(url, {\n        method: inputMethod\n    }).then(response => {\n      if (response.ok) {\n        return response.json()\n      } throw new Error('There was an issue requesting the API')\n    }).then(json => {\n      return json\n    })\n  }\n\n  getOrganizationData(organization) {\n    let inputParams = \"page=0&limit=100&sort=NAME&order=ASC\"\n    let inputResource = organization;\n  \n    this.swaggerhub('GET', inputResource, inputParams).then(response => {\n      this.setState({\n        definitionList: response.apis\n      })\n    })\n  }\n\n  updateDefinitionLink(newLink) {\n    this.setState({\n      definitionLink: newLink\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Sidebar \n          organizationConfig={this.state.organizationConfig}\n          definitionList={this.state.definitionList}\n          updateDefinitionLink={this.updateDefinitionLink}\n          getOrganizationData={this.getOrganizationData}\n        />\n        \n        <div id=\"api-data\">\n          <SwaggerUI \n            url={this.state.definitionLink}\n            docExpansion=\"list\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}